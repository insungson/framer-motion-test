{"version":3,"file":"static/js/54.f90cfcc4.chunk.js","mappings":"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","sources":["motions/animatePresenceSlider.tsx","../node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../node_modules/framer-motion/dist/es/utils/use-force-update.mjs"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { useState } from \"react\";\r\nconst Wrapper = styled(motion.div)`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  background-color: aqua;\r\n`;\r\nconst Box = styled(motion.div)`\r\n  width: 400px;\r\n  height: 200px;\r\n  background-color: rgba(255, 255, 255, 1);\r\n  border-radius: 40px;\r\n  /* position: absolute; */\r\n  top: 100px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 28px;\r\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\r\n`;\r\n\r\n// 하위 컴포넌트에 들어갈 cusrom 변수는 함수의 input 으로 들어가기 때문에\r\n// 아래처럼 box 변수안의 entry, exit 처럼 isBack 같은 변수를 사용해도 된다\r\nconst box = {\r\n  entry: (isBack: boolean) => ({\r\n    x: isBack ? -500 : 500,\r\n    opacity: 0,\r\n    scale: 0,\r\n  }),\r\n  center: {\r\n    x: 0,\r\n    opacity: 1,\r\n    scale: 1,\r\n    transition: {\r\n      duration: 0.3,\r\n    },\r\n  },\r\n  exit: (isBack: boolean) => ({\r\n    x: isBack ? 500 : -500,\r\n    opacity: 0,\r\n    scale: 0,\r\n    transition: { duration: 0.3 },\r\n  }),\r\n};\r\n\r\nconst AnimatePresenceSlider = () => {\r\n  const [visible, setVisible] = useState(1);\r\n  const [back, setBack] = useState(false);\r\n\r\n  const nextPlease = () => {\r\n    setBack(false);\r\n    setVisible((prev) => (prev === 10 ? 10 : prev + 1));\r\n  };\r\n  const prevPlease = () => {\r\n    setBack(true);\r\n    setVisible((prev) => (prev === 1 ? 1 : prev - 1));\r\n  };\r\n\r\n  // 아래의 custom 속성은 AnimatePresence 컴포넌트를 통해 하위 컴포넌트에 속하는 variants 에 공유시킨다.\r\n  // 물론 해당 하위 컴포넌트에도 custom 속성을 넣어줘야 한다. (redux 의 store 같은 개념이다)\r\n  // 슬라이드 시 커지면서 보여지고 작아지면서 사라지는 처리 + next, prev 의 효과 방향이 다르게 처리된다.\r\n  return (\r\n    <Wrapper>\r\n      <AnimatePresence custom={back}>\r\n        {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((i) =>\r\n          i === visible ? (\r\n            <Box\r\n              custom={back}\r\n              variants={box}\r\n              initial=\"entry\"\r\n              animate=\"center\"\r\n              exit=\"exit\"\r\n              key={i}\r\n            >\r\n              {i}\r\n            </Box>\r\n          ) : null\r\n        )}\r\n      </AnimatePresence>\r\n      <button onClick={nextPlease}>next</button>\r\n      <button onClick={prevPlease}>prev</button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default AnimatePresenceSlider;\r\n","import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    var isMounted = useRef(false);\n    useIsomorphicLayoutEffect(function () {\n        isMounted.current = true;\n        return function () {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import { __values } from 'tslib';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\n\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useId();\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            var e_1, _a;\n            presenceChildren.set(childId, true);\n            try {\n                for (var _b = __values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var isComplete = _c.value;\n                    if (!isComplete)\n                        return; // can stop searching when any is incomplete\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { __read, __spreadArray } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { env } from '../../utils/process.mjs';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\n\nvar getChildKey = function (child) { return child.key || \"\"; };\nfunction updateChildLookup(children, allChildren) {\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var _d = __read(useForceUpdate(), 1), forceRender = _d[0];\n    var forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    var isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    var childrenToRender = filteredChildren;\n    var exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    var isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(function () {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(function () {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map(function (child) { return (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = __spreadArray([], __read(childrenToRender), false);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    if (env !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n","import { __read } from 'tslib';\nimport sync from 'framesync';\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\n\nfunction useForceUpdate() {\n    var isMounted = useIsMounted();\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    var forceRender = useCallback(function () {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    var deferredForceRender = useCallback(function () { return sync.postRender(forceRender); }, [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n"],"names":["Wrapper","styled","motion","Box","box","entry","isBack","x","opacity","scale","center","transition","duration","exit","useState","visible","setVisible","back","setBack","custom","map","i","variants","initial","animate","onClick","prev","useIsMounted","isMounted","useRef","useIsomorphicLayoutEffect","current","PresenceChild","_a","children","isPresent","onExitComplete","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","id","useId","context","useMemo","childId","e_1","set","_b","__values","values","_c","next","done","value","e_1_1","error","return","call","register","delete","undefined","forEach","_","key","React","size","PresenceContext","Map","getChildKey","child","AnimatePresence","exitBeforeEnter","_d","__read","forcedRenderCount","setForcedRenderCount","forceRender","useCallback","sync","useForceUpdate","forceRenderLayoutGroup","useContext","LayoutGroupContext","filteredChildren","filtered","Children","isValidElement","push","onlyElements","childrenToRender","exiting","Set","presentChildren","allChildren","isInitialRender","updateChildLookup","useUnmountEffect","clear","__spreadArray","presentKeys","targetKeys","numPresent","length","indexOf","add","get","insertionIndex","splice","removeIndex","findIndex","presentChild","has","env","console","warn","cloneElement"],"sourceRoot":""}