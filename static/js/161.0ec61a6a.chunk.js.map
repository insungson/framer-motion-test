{"version":3,"file":"static/js/161.0ec61a6a.chunk.js","mappings":"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","sources":["motions/layoutAnimate2.tsx","../node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../node_modules/framer-motion/dist/es/utils/use-force-update.mjs"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { useState } from \"react\";\r\n// 아래는 전체 껍대기 컴포넌트다\r\nconst Wrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  background-color: aqua;\r\n`;\r\n// 박스의 겉쪽 박스 컴포넌트이다.\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  width: 50vw;\r\n  gap: 10px;\r\n  div:first-child,\r\n  div:last-child {\r\n    grid-column: span 2;\r\n  }\r\n`;\r\n// 내부 박스 컴포넌트이다.\r\nconst Box = styled(motion.div)`\r\n  background-color: rgba(255, 255, 255, 1);\r\n  border-radius: 40px;\r\n  height: 200px;\r\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\r\n`;\r\n// 백그라운드 컴포넌트\r\nconst Overlay = styled(motion.div)`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n// 백그라운드 컴포넌트의 css variants 객체이다.\r\nconst overlay = {\r\n  hidden: { backgroundColor: \"rgba(0, 0, 0, 0)\" },\r\n  visible: { backgroundColor: \"rgba(0, 0, 0, 0.5)\" },\r\n  exit: { backgroundColor: \"rgba(0, 0, 0, 0)\" },\r\n};\r\n\r\nconst LayoutAnimate2 = () => {\r\n  const [id, setId] = useState<null | string>(null);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Grid>\r\n        {[\"1\", \"2\", \"3\", \"4\"].map((n) => (\r\n          <Box onClick={() => setId(n)} key={n} layoutId={n} />\r\n        ))}\r\n      </Grid>\r\n      <AnimatePresence>\r\n        {id ? (\r\n          <Overlay\r\n            variants={overlay}\r\n            onClick={() => setId(null)}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            exit=\"exit\"\r\n          >\r\n            <Box layoutId={id} style={{ width: 400, height: 200 }} />\r\n          </Overlay>\r\n        ) : null}\r\n      </AnimatePresence>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default LayoutAnimate2;\r\n","import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    var isMounted = useRef(false);\n    useIsomorphicLayoutEffect(function () {\n        isMounted.current = true;\n        return function () {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import { __values } from 'tslib';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\n\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useId();\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            var e_1, _a;\n            presenceChildren.set(childId, true);\n            try {\n                for (var _b = __values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var isComplete = _c.value;\n                    if (!isComplete)\n                        return; // can stop searching when any is incomplete\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { __read, __spreadArray } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { env } from '../../utils/process.mjs';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\n\nvar getChildKey = function (child) { return child.key || \"\"; };\nfunction updateChildLookup(children, allChildren) {\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var _d = __read(useForceUpdate(), 1), forceRender = _d[0];\n    var forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    var isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    var childrenToRender = filteredChildren;\n    var exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    var isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(function () {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(function () {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map(function (child) { return (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = __spreadArray([], __read(childrenToRender), false);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    if (env !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n","import { __read } from 'tslib';\nimport sync from 'framesync';\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\n\nfunction useForceUpdate() {\n    var isMounted = useIsMounted();\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    var forceRender = useCallback(function () {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    var deferredForceRender = useCallback(function () { return sync.postRender(forceRender); }, [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n"],"names":["Wrapper","styled","Grid","Box","motion","Overlay","overlay","hidden","backgroundColor","visible","exit","useState","id","setId","map","n","onClick","layoutId","variants","initial","animate","style","width","height","useIsMounted","isMounted","useRef","useIsomorphicLayoutEffect","current","PresenceChild","_a","children","isPresent","onExitComplete","custom","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","useId","context","useMemo","childId","e_1","set","_b","__values","values","_c","next","done","value","e_1_1","error","return","call","register","delete","undefined","forEach","_","key","React","size","PresenceContext","Map","getChildKey","child","AnimatePresence","exitBeforeEnter","_d","__read","forcedRenderCount","setForcedRenderCount","forceRender","useCallback","sync","useForceUpdate","forceRenderLayoutGroup","useContext","LayoutGroupContext","filteredChildren","filtered","Children","isValidElement","push","onlyElements","childrenToRender","exiting","Set","presentChildren","allChildren","isInitialRender","updateChildLookup","useUnmountEffect","clear","__spreadArray","presentKeys","targetKeys","numPresent","length","i","indexOf","add","get","insertionIndex","splice","removeIndex","findIndex","presentChild","has","env","console","warn","cloneElement"],"sourceRoot":""}