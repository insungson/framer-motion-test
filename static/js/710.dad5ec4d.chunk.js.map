{"version":3,"file":"static/js/710.dad5ec4d.chunk.js","mappings":"uMAGMA,EAAUC,EAAAA,GAAAA,IAAH,4JASPC,GAAMD,EAAAA,EAAAA,IAAOE,EAAAA,EAAAA,IAAPF,CAAH,8MAsBT,UAdqB,WACnB,IAAMG,GAAIC,EAAAA,EAAAA,GAAe,GACnBC,GAAQC,EAAAA,EAAAA,GAAaH,EAAG,EAAE,IAAK,EAAG,KAAM,CAAC,EAAG,EAAG,KAKrD,OACE,SAACJ,EAAD,WACE,SAACE,EAAD,CAAKM,MAAO,CAAEJ,EAAAA,EAAGE,MAAAA,GAASG,KAAK,IAAIC,kBAAgB,KAGxD,C,4GCTD,SAASL,EAAeM,GACpB,IAAIC,GAAQC,EAAAA,EAAAA,IAAY,WAAc,OAAOC,EAAAA,EAAAA,GAAYH,EAAW,IAOpE,IADeI,EAAAA,EAAAA,YAAWC,EAAAA,GAAqBC,SACjC,CACV,IAAuCC,GAA9BC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,UAAST,GAAU,GAAqB,IACxDU,EAAAA,EAAAA,YAAU,WAAc,OAAOT,EAAMU,SAASJ,EAAe,GAAE,GAClE,CACD,OAAON,CACV,C,8EC9BGW,EAAW,SAAUC,GAAK,OAHN,SAAUA,GAC9B,MAAoB,kBAANA,GAAkBA,EAAEC,GACrC,CACqCC,CAAkBF,GAAKA,EAAEC,SAAME,CAAa,E,sCCFlF,SAASC,EAAuBC,EAAQC,GAIpC,IAAIlB,GAAQP,EAAAA,EAAAA,GAAeyB,KAOvBC,EAAc,WAAc,OAAOnB,EAAMoB,IAAIF,IAAmB,EAWpE,OANAC,ICXJ,SAA0BF,EAAQI,IAC9BC,EAAAA,EAAAA,IAA0B,WACtB,IAAIC,EAAgBN,EAAOO,KAAI,SAAUxB,GAAS,OAAOA,EAAMU,SAASW,EAAW,IACnF,OAAO,WAAc,OAAOE,EAAcE,SAAQ,SAAUC,GAAe,OAAOA,GAAgB,GAAI,CACzG,GACJ,CDWGC,CAAiBV,GAAQ,WAAc,OAAOW,EAAAA,GAAAA,OAAYT,GAAa,GAAO,EAAQ,IAC/EnB,CACV,C,cEtBD,SAASL,EAAakC,EAAOC,EAAyBC,EAAaC,GAC/D,IAAIC,EAAiD,oBAA5BH,EACnBA,EHAV,WAEI,IADA,IAAII,EAAO,GACFC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,GAAMC,UAAUD,GAEzB,IAAIG,GAAgBC,MAAMC,QAAQN,EAAK,IACnCO,EAAYH,EAAe,GAAK,EAChCI,EAAaR,EAAK,EAAIO,GACtBE,EAAaT,EAAK,EAAIO,GACtBV,EAAcG,EAAK,EAAIO,GACvBT,EAAUE,EAAK,EAAIO,GACnBG,GAAeC,EAAAA,EAAAA,GAAYF,EAAYZ,GAAae,EAAAA,EAAAA,IAAS,CAAEC,MAAOpC,EAASoB,EAAY,KAAOC,IACtG,OAAOM,EAAeM,EAAaF,GAAcE,CACpD,CGZSI,CAAUlB,EAAyBC,EAAaC,GACtD,OAAOO,MAAMC,QAAQX,GACfoB,EAAiBpB,EAAOI,GACxBgB,EAAiB,CAACpB,IAAQ,SAAUqB,GAClC,IAAwBC,GAAf5C,EAAAA,EAAAA,IAAO2C,EAAI,GAAgB,GACpC,OAAOjB,EAAYkB,EACtB,GACR,CACD,SAASF,EAAiBhC,EAAQgB,GAC9B,IAAIkB,GAASlD,EAAAA,EAAAA,IAAY,WAAc,MAAO,EAAK,IACnD,OAAOe,EAAuBC,GAAQ,WAClCkC,EAAOd,OAAS,EAEhB,IADA,IAAIe,EAAYnC,EAAOoB,OACdgB,EAAI,EAAGA,EAAID,EAAWC,IAC3BF,EAAOE,GAAKpC,EAAOoC,GAAGC,MAE1B,OAAOrB,EAAYkB,EACtB,GACJ,C","sources":["motions/motionValues.tsx","../node_modules/framer-motion/dist/es/value/use-motion-value.mjs","../node_modules/framer-motion/dist/es/utils/transform.mjs","../node_modules/framer-motion/dist/es/value/use-combine-values.mjs","../node_modules/framer-motion/dist/es/value/use-on-change.mjs","../node_modules/framer-motion/dist/es/value/use-transform.mjs"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: aqua;\r\n`;\r\n\r\nconst Box = styled(motion.div)`\r\n  width: 200px;\r\n  height: 200px;\r\n  background-color: rgba(255, 255, 255, 1);\r\n  border-radius: 40px;\r\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\r\n`;\r\n\r\nconst MotionValues = () => {\r\n  const x = useMotionValue(0);\r\n  const scale = useTransform(x, [-800, 0, 800], [2, 1, 0.1]);\r\n  // 첫번째 인자: 위와 같이 useMotionValue 로 얻은 값\r\n  // 두번째 인자: 위와 같이 움직임의 범위\r\n  // 세번째 인자: 위와 같이 변환할 범위\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box style={{ x, scale }} drag=\"x\" dragSnapToOrigin />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default MotionValues;\r\n","import { __read } from 'tslib';\nimport { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    var value = useConstant(function () { return motionValue(initial); });\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    var isStatic = useContext(MotionConfigContext).isStatic;\n    if (isStatic) {\n        var _a = __read(useState(initial), 2), setLatest_1 = _a[1];\n        useEffect(function () { return value.onChange(setLatest_1); }, []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { __assign } from 'tslib';\nimport { interpolate } from 'popmotion';\n\nvar isCustomValueType = function (v) {\n    return typeof v === \"object\" && v.mix;\n};\nvar getMixer = function (v) { return (isCustomValueType(v) ? v.mix : undefined); };\nfunction transform() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var useImmediate = !Array.isArray(args[0]);\n    var argOffset = useImmediate ? 0 : -1;\n    var inputValue = args[0 + argOffset];\n    var inputRange = args[1 + argOffset];\n    var outputRange = args[2 + argOffset];\n    var options = args[3 + argOffset];\n    var interpolator = interpolate(inputRange, outputRange, __assign({ mixer: getMixer(outputRange[0]) }, options));\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { useMotionValue } from './use-motion-value.mjs';\nimport { useMultiOnChange } from './use-on-change.mjs';\nimport sync from 'framesync';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    var value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    var updateValue = function () { return value.set(combineValues()); };\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useMultiOnChange(values, function () { return sync.update(updateValue, false, true); });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\n\nfunction useOnChange(value, callback) {\n    useIsomorphicLayoutEffect(function () {\n        if (isMotionValue(value))\n            return value.onChange(callback);\n    }, [callback]);\n}\nfunction useMultiOnChange(values, handler) {\n    useIsomorphicLayoutEffect(function () {\n        var subscriptions = values.map(function (value) { return value.onChange(handler); });\n        return function () { return subscriptions.forEach(function (unsubscribe) { return unsubscribe(); }); };\n    });\n}\n\nexport { useMultiOnChange, useOnChange };\n","import { __read } from 'tslib';\nimport { transform } from '../utils/transform.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    var transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], function (_a) {\n            var _b = __read(_a, 1), latest = _b[0];\n            return transformer(latest);\n        });\n}\nfunction useListTransform(values, transformer) {\n    var latest = useConstant(function () { return []; });\n    return useCombineMotionValues(values, function () {\n        latest.length = 0;\n        var numValues = values.length;\n        for (var i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n"],"names":["Wrapper","styled","Box","motion","x","useMotionValue","scale","useTransform","style","drag","dragSnapToOrigin","initial","value","useConstant","motionValue","useContext","MotionConfigContext","isStatic","setLatest_1","__read","useState","useEffect","onChange","getMixer","v","mix","isCustomValueType","undefined","useCombineMotionValues","values","combineValues","updateValue","set","handler","useIsomorphicLayoutEffect","subscriptions","map","forEach","unsubscribe","useMultiOnChange","sync","input","inputRangeOrTransformer","outputRange","options","transformer","args","_i","arguments","length","useImmediate","Array","isArray","argOffset","inputValue","inputRange","interpolator","interpolate","__assign","mixer","transform","useListTransform","_a","latest","numValues","i","get"],"sourceRoot":""}